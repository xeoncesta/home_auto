
home_auto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00000408  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ea  008000ea  00000526  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007d  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a27  00000000  00000000  000005c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f5  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000708  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f9  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000456  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa ee       	ldi	r26, 0xEA	; 234
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3e       	cpi	r26, 0xEB	; 235
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  8a:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <cmd>:
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
  92:	88 bb       	out	0x18, r24	; 24
PORTC=0x04;
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	85 bb       	out	0x15, r24	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	84 ec       	ldi	r24, 0xC4	; 196
  9a:	99 e0       	ldi	r25, 0x09	; 9
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <cmd+0xa>
_delay_ms(10);
PORTC=0x00;
  a0:	15 ba       	out	0x15, r1	; 21

}
  a2:	08 95       	ret

000000a4 <data>:
void data(char c)
{
PORTB=c;
  a4:	88 bb       	out	0x18, r24	; 24
PORTC=0x05;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	84 ec       	ldi	r24, 0xC4	; 196
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <data+0xa>
_delay_ms(10);
PORTC=0x01;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	85 bb       	out	0x15, r24	; 21

}
  b6:	08 95       	ret

000000b8 <lcd>:
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	88 bb       	out	0x18, r24	; 24
PORTC=0x04;
  bc:	94 e0       	ldi	r25, 0x04	; 4
  be:	95 bb       	out	0x15, r25	; 21
  c0:	24 ec       	ldi	r18, 0xC4	; 196
  c2:	39 e0       	ldi	r19, 0x09	; 9
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd+0xe>
_delay_ms(10);
PORTC=0x00;
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	f9 01       	movw	r30, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd+0x16>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	88 bb       	out	0x18, r24	; 24
PORTC=0x04;
  d6:	95 bb       	out	0x15, r25	; 21
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd+0x22>
_delay_ms(10);
PORTC=0x00;
  de:	15 ba       	out	0x15, r1	; 21
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd+0x2a>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
  e6:	8e e0       	ldi	r24, 0x0E	; 14
  e8:	88 bb       	out	0x18, r24	; 24
PORTC=0x04;
  ea:	95 bb       	out	0x15, r25	; 21
  ec:	f9 01       	movw	r30, r18
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd+0x36>
_delay_ms(10);
PORTC=0x00;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd+0x3e>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	88 bb       	out	0x18, r24	; 24
PORTC=0x04;
  fe:	95 bb       	out	0x15, r25	; 21
 100:	c9 01       	movw	r24, r18
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd+0x4a>
_delay_ms(10);
PORTC=0x00;
 106:	15 ba       	out	0x15, r1	; 21
 108:	c9 01       	movw	r24, r18
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd+0x52>
cmd(0x0e);       //display on ,cursor on
_delay_ms(10);
cmd(0x80);         //selecting first row first column
_delay_ms(10);

}
 10e:	08 95       	ret

00000110 <string>:

void string(unsigned char *p)    //function for displaying strings
{
 110:	fc 01       	movw	r30, r24

}
void data(char c)
{
PORTB=c;
PORTC=0x05;
 112:	55 e0       	ldi	r21, 0x05	; 5
 114:	24 ec       	ldi	r18, 0xC4	; 196
 116:	39 e0       	ldi	r19, 0x09	; 9
_delay_ms(10);
PORTC=0x01;
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	07 c0       	rjmp	.+14     	; 0x12a <string+0x1a>
PORTC=0x00;

}
void data(char c)
{
PORTB=c;
 11c:	88 bb       	out	0x18, r24	; 24
PORTC=0x05;
 11e:	55 bb       	out	0x15, r21	; 21
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <string+0x12>
_delay_ms(10);
PORTC=0x01;
 126:	45 bb       	out	0x15, r20	; 21
void string(unsigned char *p)    //function for displaying strings
{

while(*p!='\0')
{data(*p);
p++;}
 128:	31 96       	adiw	r30, 0x01	; 1
}

void string(unsigned char *p)    //function for displaying strings
{

while(*p!='\0')
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	b1 f7       	brne	.-20     	; 0x11c <string+0xc>
{data(*p);
p++;}

}
 130:	08 95       	ret

00000132 <num>:


void num(unsigned int p)    //functions for displaying ASCII values
{
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	8c 01       	movw	r16, r24
 140:	9c 01       	movw	r18, r24
 142:	e1 e0       	ldi	r30, 0x01	; 1
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 c0       	rjmp	.+32     	; 0x168 <num+0x36>

unsigned int k,w,b=1;
k=p;
while(k>=10)
{
b=b*10;
 148:	cf 01       	movw	r24, r30
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	43 e0       	ldi	r20, 0x03	; 3
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	4a 95       	dec	r20
 156:	e1 f7       	brne	.-8      	; 0x150 <num+0x1e>
 158:	e8 0f       	add	r30, r24
 15a:	f9 1f       	adc	r31, r25
k=k/10;
 15c:	c9 01       	movw	r24, r18
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 166:	9b 01       	movw	r18, r22
void num(unsigned int p)    //functions for displaying ASCII values
{

unsigned int k,w,b=1;
k=p;
while(k>=10)
 168:	2a 30       	cpi	r18, 0x0A	; 10
 16a:	31 05       	cpc	r19, r1
 16c:	68 f7       	brcc	.-38     	; 0x148 <num+0x16>
 16e:	18 c0       	rjmp	.+48     	; 0x1a0 <num+0x6e>
b=b*10;
k=k/10;
}
while(b>0)
{
w=p/b;
 170:	c8 01       	movw	r24, r16
 172:	bf 01       	movw	r22, r30
 174:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 178:	46 2f       	mov	r20, r22
p=p%b;
 17a:	c8 01       	movw	r24, r16
 17c:	bf 01       	movw	r22, r30
 17e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 182:	8c 01       	movw	r16, r24
b=b/10;
 184:	cf 01       	movw	r24, r30
 186:	6a e0       	ldi	r22, 0x0A	; 10
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 18e:	fb 01       	movw	r30, r22
data(w+48);
 190:	40 5d       	subi	r20, 0xD0	; 208
PORTC=0x00;

}
void data(char c)
{
PORTB=c;
 192:	48 bb       	out	0x18, r20	; 24
PORTC=0x05;
 194:	e5 ba       	out	0x15, r14	; 21
 196:	ce 01       	movw	r24, r28
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <num+0x66>
_delay_ms(10);
PORTC=0x01;
 19c:	f5 ba       	out	0x15, r15	; 21
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <num+0x7a>

}
void data(char c)
{
PORTB=c;
PORTC=0x05;
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	e8 2e       	mov	r14, r24
 1a4:	c4 ec       	ldi	r28, 0xC4	; 196
 1a6:	d9 e0       	ldi	r29, 0x09	; 9
_delay_ms(10);
PORTC=0x01;
 1a8:	ff 24       	eor	r15, r15
 1aa:	f3 94       	inc	r15
while(k>=10)
{
b=b*10;
k=k/10;
}
while(b>0)
 1ac:	30 97       	sbiw	r30, 0x00	; 0
 1ae:	01 f7       	brne	.-64     	; 0x170 <num+0x3e>
data(w+48);

}


}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	08 95       	ret

000001be <main>:
unsigned char card3[6]="SOUND ";
unsigned char card4[6]="FAN   ";


void main()
{
 1be:	5f 92       	push	r5
 1c0:	6f 92       	push	r6
 1c2:	7f 92       	push	r7
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
//Ports init.
DDRC=0xff;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	84 bb       	out	0x14, r24	; 20
DDRB=0xff;
 1e0:	87 bb       	out	0x17, r24	; 23
DDRD=0x00;
 1e2:	11 ba       	out	0x11, r1	; 17
DDRA=0xff;
 1e4:	8a bb       	out	0x1a, r24	; 26
PORTA=0x00;
 1e6:	1b ba       	out	0x1b, r1	; 27
lcd();
 1e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd>
string("WELCOME To NSITAUTO          __[ver-1.0]");
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 88 00 	call	0x110	; 0x110 <string>
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	95 e7       	ldi	r25, 0x75	; 117
 1f8:	29 e1       	ldi	r18, 0x19	; 25
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 204:	d9 f7       	brne	.-10     	; 0x1fc <main+0x3e>

_delay_ms(3000);

//cmd(0x1c);
//registers initialization ,see datasheet
UBRRL=51;
 206:	83 e3       	ldi	r24, 0x33	; 51
 208:	89 b9       	out	0x09, r24	; 9
UCSRB=(1<<TXEN)|(1<<RXEN);
 20a:	88 e1       	ldi	r24, 0x18	; 24
 20c:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	80 bd       	out	0x20, r24	; 32
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	9f e1       	ldi	r25, 0x1F	; 31
 216:	29 e1       	ldi	r18, 0x19	; 25
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 220:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 222:	d9 f7       	brne	.-10     	; 0x21a <main+0x5c>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 224:	00 e8       	ldi	r16, 0x80	; 128
PORTC=0x04;
 226:	14 e0       	ldi	r17, 0x04	; 4
 228:	b4 ec       	ldi	r27, 0xC4	; 196
 22a:	ab 2e       	mov	r10, r27
 22c:	b9 e0       	ldi	r27, 0x09	; 9
 22e:	bb 2e       	mov	r11, r27
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 230:	a9 e1       	ldi	r26, 0x19	; 25
 232:	ca 2e       	mov	r12, r26
 234:	d1 2c       	mov	r13, r1
 236:	f0 ec       	ldi	r31, 0xC0	; 192
 238:	6f 2e       	mov	r6, r31

}
void data(char c)
{
PORTB=c;
PORTC=0x05;
 23a:	e5 e0       	ldi	r30, 0x05	; 5
 23c:	5e 2e       	mov	r5, r30
_delay_ms(10);
PORTC=0x01;
 23e:	77 24       	eor	r7, r7
 240:	73 94       	inc	r7
 242:	74 ec       	ldi	r23, 0xC4	; 196
 244:	e7 2e       	mov	r14, r23
 246:	79 e0       	ldi	r23, 0x09	; 9
 248:	f7 2e       	mov	r15, r23
 24a:	99 24       	eor	r9, r9
 24c:	93 94       	inc	r9
else if((strncmp(arr,card4,6))==0)
{
 cmd(0x80);
 
 string("FAN");
 PORTA=0x08;
 24e:	68 e0       	ldi	r22, 0x08	; 8
 250:	86 2e       	mov	r8, r22
UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
_delay_ms(800);

while(1)
{
lcd();
 252:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 256:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 258:	15 bb       	out	0x15, r17	; 21
 25a:	c5 01       	movw	r24, r10
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x9e>
_delay_ms(10);
PORTC=0x00;
 260:	15 ba       	out	0x15, r1	; 21

while(1)
{
lcd();
cmd(0x80);
string("Enter your command:");
 262:	89 e8       	ldi	r24, 0x89	; 137
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 88 00 	call	0x110	; 0x110 <string>
 26a:	80 ea       	ldi	r24, 0xA0	; 160
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	f6 01       	movw	r30, r12
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 274:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 276:	d9 f7       	brne	.-10     	; 0x26e <main+0xb0>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 278:	68 ba       	out	0x18, r6	; 24
PORTC=0x04;
 27a:	15 bb       	out	0x15, r17	; 21
 27c:	c5 01       	movw	r24, r10
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xc0>
_delay_ms(10);
PORTC=0x00;
 282:	15 ba       	out	0x15, r1	; 21
 284:	ec ec       	ldi	r30, 0xCC	; 204
 286:	f0 e0       	ldi	r31, 0x00	; 0
string("Enter your command:");
_delay_ms(400);
cmd(0xc0);
for(int i=0;i<=5;i++)
{
while((UCSRA&(1<<RXC))==0);//polling for recieving data in UDR buffer
 288:	5f 9b       	sbis	0x0b, 7	; 11
 28a:	fe cf       	rjmp	.-4      	; 0x288 <main+0xca>

x=UDR;
 28c:	2c b1       	in	r18, 0x0c	; 12
arr[i]=x;
 28e:	21 93       	st	Z+, r18
PORTC=0x00;

}
void data(char c)
{
PORTB=c;
 290:	28 bb       	out	0x18, r18	; 24
PORTC=0x05;
 292:	55 ba       	out	0x15, r5	; 21
 294:	c5 01       	movw	r24, r10
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0xd8>
_delay_ms(10);
PORTC=0x01;
 29a:	75 ba       	out	0x15, r7	; 21
lcd();
cmd(0x80);
string("Enter your command:");
_delay_ms(400);
cmd(0xc0);
for(int i=0;i<=5;i++)
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	e2 3d       	cpi	r30, 0xD2	; 210
 2a0:	f8 07       	cpc	r31, r24
 2a2:	91 f7       	brne	.-28     	; 0x288 <main+0xca>
 2a4:	20 93 ea 00 	sts	0x00EA, r18
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 2a8:	98 ba       	out	0x18, r9	; 24
PORTC=0x04;
 2aa:	15 bb       	out	0x15, r17	; 21
 2ac:	c7 01       	movw	r24, r14
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0xf0>
_delay_ms(10);
PORTC=0x00;
 2b2:	15 ba       	out	0x15, r1	; 21
arr[i]=x;
data(x);

}
cmd(0x01);
if((strncmp(arr,card1,6))==0)
 2b4:	ef 01       	movw	r28, r30
 2b6:	26 97       	sbiw	r28, 0x06	; 6
 2b8:	ce 01       	movw	r24, r28
 2ba:	62 ed       	ldi	r22, 0xD2	; 210
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	46 e0       	ldi	r20, 0x06	; 6
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strncmp>
 2c6:	00 97       	sbiw	r24, 0x00	; 0
 2c8:	99 f4       	brne	.+38     	; 0x2f0 <main+0x132>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 2ca:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 2cc:	15 bb       	out	0x15, r17	; 21
 2ce:	c7 01       	movw	r24, r14
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x112>
_delay_ms(10);
PORTC=0x00;
 2d4:	15 ba       	out	0x15, r1	; 21
}
cmd(0x01);
if((strncmp(arr,card1,6))==0)
{
 cmd(0x80);
 string("LIGHT1");
 2d6:	8d e9       	ldi	r24, 0x9D	; 157
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 88 00 	call	0x110	; 0x110 <string>
 PORTA=0x01;
 2de:	9b ba       	out	0x1b, r9	; 27
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
 2e4:	f6 01       	movw	r30, r12
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	d9 f7       	brne	.-10     	; 0x2e4 <main+0x126>
 2ee:	b1 cf       	rjmp	.-158    	; 0x252 <main+0x94>
 _delay_ms(40000);
//break; 

}
else if((strncmp(arr,card2,6))==0)
 2f0:	ce 01       	movw	r24, r28
 2f2:	68 ed       	ldi	r22, 0xD8	; 216
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	46 e0       	ldi	r20, 0x06	; 6
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strncmp>
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	a1 f4       	brne	.+40     	; 0x32a <main+0x16c>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 302:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 304:	15 bb       	out	0x15, r17	; 21
 306:	c7 01       	movw	r24, r14
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <main+0x14a>
_delay_ms(10);
PORTC=0x00;
 30c:	15 ba       	out	0x15, r1	; 21
}
else if((strncmp(arr,card2,6))==0)
{
 cmd(0x80);
 
 string("LIGHT2");
 30e:	84 ea       	ldi	r24, 0xA4	; 164
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 88 00 	call	0x110	; 0x110 <string>
 PORTA=0x02;
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	8b bb       	out	0x1b, r24	; 27
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	9c e9       	ldi	r25, 0x9C	; 156
 31e:	f6 01       	movw	r30, r12
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 324:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 326:	d9 f7       	brne	.-10     	; 0x31e <main+0x160>
 328:	94 cf       	rjmp	.-216    	; 0x252 <main+0x94>
_delay_ms(4000);
//break;
}
else if((strncmp(arr,card3,6))==0)
 32a:	ce 01       	movw	r24, r28
 32c:	6e ed       	ldi	r22, 0xDE	; 222
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	46 e0       	ldi	r20, 0x06	; 6
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strncmp>
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	99 f4       	brne	.+38     	; 0x362 <main+0x1a4>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 33c:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 33e:	15 bb       	out	0x15, r17	; 21
 340:	c7 01       	movw	r24, r14
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <main+0x184>
_delay_ms(10);
PORTC=0x00;
 346:	15 ba       	out	0x15, r1	; 21
}
else if((strncmp(arr,card3,6))==0)
{
 cmd(0x80);
 
 string("SPEAKERS");
 348:	8b ea       	ldi	r24, 0xAB	; 171
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 88 00 	call	0x110	; 0x110 <string>
 PORTA=0x04;
 350:	1b bb       	out	0x1b, r17	; 27
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	9f ef       	ldi	r25, 0xFF	; 255
 356:	f6 01       	movw	r30, r12
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	d9 f7       	brne	.-10     	; 0x356 <main+0x198>
 360:	78 cf       	rjmp	.-272    	; 0x252 <main+0x94>
_delay_ms(40000);
//break;
}
else if((strncmp(arr,card4,6))==0)
 362:	ce 01       	movw	r24, r28
 364:	64 ee       	ldi	r22, 0xE4	; 228
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	46 e0       	ldi	r20, 0x06	; 6
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <strncmp>
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	99 f4       	brne	.+38     	; 0x39a <main+0x1dc>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 374:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 376:	15 bb       	out	0x15, r17	; 21
 378:	c7 01       	movw	r24, r14
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x1bc>
_delay_ms(10);
PORTC=0x00;
 37e:	15 ba       	out	0x15, r1	; 21
}
else if((strncmp(arr,card4,6))==0)
{
 cmd(0x80);
 
 string("FAN");
 380:	84 eb       	ldi	r24, 0xB4	; 180
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 88 00 	call	0x110	; 0x110 <string>
 PORTA=0x08;
 388:	8b ba       	out	0x1b, r8	; 27
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	9c e9       	ldi	r25, 0x9C	; 156
 38e:	f6 01       	movw	r30, r12
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 394:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 396:	d9 f7       	brne	.-10     	; 0x38e <main+0x1d0>
 398:	5c cf       	rjmp	.-328    	; 0x252 <main+0x94>
/*Defines a macro for the delay.h header file. F_CPU is the microcontroller frequency value for the delay.h header file. Default value of F_CPU in delay.h header file is 1000000(1MHz)*/
//LCD FUNC.:cmd(),data() lcd(),string(),num()

void cmd(char c)
{
PORTB=c;
 39a:	08 bb       	out	0x18, r16	; 24
PORTC=0x04;
 39c:	15 bb       	out	0x15, r17	; 21
 39e:	c7 01       	movw	r24, r14
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <main+0x1e2>
_delay_ms(10);
PORTC=0x00;
 3a4:	15 ba       	out	0x15, r1	; 21
else
{
//cmd(0x01);
cmd(0x80);
 
string("SORRY!!  Wrong cmd:");
 3a6:	88 eb       	ldi	r24, 0xB8	; 184
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 88 00 	call	0x110	; 0x110 <string>
PORTA=0x00;
 3ae:	1b ba       	out	0x1b, r1	; 27
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	9c e9       	ldi	r25, 0x9C	; 156
 3b4:	f6 01       	movw	r30, r12
 3b6:	31 97       	sbiw	r30, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x1f8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3bc:	d9 f7       	brne	.-10     	; 0x3b4 <main+0x1f6>
 3be:	49 cf       	rjmp	.-366    	; 0x252 <main+0x94>

000003c0 <__udivmodhi4>:
 3c0:	aa 1b       	sub	r26, r26
 3c2:	bb 1b       	sub	r27, r27
 3c4:	51 e1       	ldi	r21, 0x11	; 17
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <__udivmodhi4_ep>

000003c8 <__udivmodhi4_loop>:
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	a6 17       	cp	r26, r22
 3ce:	b7 07       	cpc	r27, r23
 3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__udivmodhi4_ep>
 3d2:	a6 1b       	sub	r26, r22
 3d4:	b7 0b       	sbc	r27, r23

000003d6 <__udivmodhi4_ep>:
 3d6:	88 1f       	adc	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	5a 95       	dec	r21
 3dc:	a9 f7       	brne	.-22     	; 0x3c8 <__udivmodhi4_loop>
 3de:	80 95       	com	r24
 3e0:	90 95       	com	r25
 3e2:	bc 01       	movw	r22, r24
 3e4:	cd 01       	movw	r24, r26
 3e6:	08 95       	ret

000003e8 <strncmp>:
 3e8:	fb 01       	movw	r30, r22
 3ea:	dc 01       	movw	r26, r24
 3ec:	41 50       	subi	r20, 0x01	; 1
 3ee:	50 40       	sbci	r21, 0x00	; 0
 3f0:	30 f0       	brcs	.+12     	; 0x3fe <strncmp+0x16>
 3f2:	8d 91       	ld	r24, X+
 3f4:	01 90       	ld	r0, Z+
 3f6:	80 19       	sub	r24, r0
 3f8:	19 f4       	brne	.+6      	; 0x400 <strncmp+0x18>
 3fa:	00 20       	and	r0, r0
 3fc:	b9 f7       	brne	.-18     	; 0x3ec <strncmp+0x4>
 3fe:	88 1b       	sub	r24, r24
 400:	99 0b       	sbc	r25, r25
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
